{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Git-Secrets project config schema",
  "description": "Documentation / Usage / Instructions: https://github.com/benammann/git-secrets",
  "type": "object",
  "properties": {
    "version": {
      "type": "integer",
      "enum": [1],
      "minimum": 1,
      "maximum": 1,
      "description": "Which config schema / parser to use"
    },
    "context": {
      "type": "object",
      "description": "Here you can configure all the contexts you want, default is required",
      "properties": {
        "default": {
          "description": "The default context, you can specify the context by using -c <context-name>",
          "type": "object",
          "properties": {
            "decryptSecret": {
              "type": "object",
              "description": "How to decode the secrets, available: fromName or fromEnv\nYou can only use one\nYou can also overwrite the decodeSecret method in another context\nSo you can use another secret encoding for your production secrets to protect them from the developers for example",
              "properties": {
                "fromName": {
                  "description": "From name uses the secret stored at ~/.git-secrets.yaml",
                  "type": "string"
                },
                "fromEnv": {
                  "description": "From env uses the secret stored in the environment variable",
                  "type": "string"
                }
              },
              "oneOf": [
                {
                  "required": ["fromName"]
                },
                {
                  "required": ["fromEnv"]
                }
              ],
              "maxProperties": 1
            },
            "secrets": {
              "type": "object",
              "description": "Specify your secrets here",
              "patternProperties": {
                ".*": {
                  "description": "Encode them via git-secrets encode <value-to-encode> and them copy them here\nAvailable in the template via {{.Secrets.secretName}}",
                  "type": "string"
                }
              }
            },
            "configs": {
              "type": "object",
              "description": "Specify your config values here",
              "patternProperties": {
                ".*": {
                  "description": "Just put plain values here\nAvailable in the template via {{.Configs.myConfigValue}}",
                  "type": "string"
                }
              }
            }
          },
          "required": [
            "decryptSecret",
            "secrets"
          ]
        }
      },
      "patternProperties": {
        ".*": {
          "description": "This is a custom context, you can specify the context by using -c <context-name>",
          "type": "object",
          "properties": {
            "decryptSecret": {
              "type": "object",
              "description": "How to decode the secrets, available: fromName or fromEnv\nYou can only use one\nYou can also overwrite the decodeSecret method in another context\nSo you can use another secret encoding for your production secrets to protect them from the developers for example",
              "properties": {
                "fromName": {
                  "description": "From name uses the secret stored at ~/.git-secrets.yaml",
                  "type": "string"
                },
                "fromEnv": {
                  "description": "From env uses the secret stored in the environment variable",
                  "type": "string"
                }
              },
              "oneOf": [
                {
                  "required": ["fromName"]
                },
                {
                  "required": ["fromEnv"]
                }
              ],
              "maxProperties": 1
            },
            "secrets": {
              "type": "object",
              "description": "Allows to overwrite secrets from the default context",
              "patternProperties": {
                ".*": {
                  "description": "This secret overwrites the secret from the default context",
                  "type": "string"
                }
              }
            },
            "configs": {
              "type": "object",
              "description": "Specify your config values here",
              "patternProperties": {
                ".*": {
                  "description": "Just put plain values here\nAvailable in the template via {{.Configs.myConfigValue}}",
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "required": ["default"]
    },
    "renderFiles": {
      "type": "object",
      "description": "The renderFiles feature takes the defined files and renders them using the go template module\nDocumentation: https://learn.hashicorp.com/tutorials/nomad/go-template-syntax\nUsage: git-secrets render\ngit-secrets render --debug --dry-run: Debug and Dry run\nFor more details about rendering please head over to the documentation\nAccess Decoded Secrets: {{.Secrets.yourSecretName}}\nContext Name: {{.ContextName}}\nFile: {{.File.FileIn}} and {{.File.FileOut}}",
      "patternProperties": {
        ".*": {
          "type": "object",
          "description": "must be one of the defined contexts",
          "properties": {
            "files": {
              "description": "which files to render",
              "type": "array",
              "minItems": 1,
              "items": [
                {
                  "type": "object",
                  "description": "a file to render",
                  "properties": {
                    "fileIn": {
                      "description": "input file reference related to this config",
                      "type": "string"
                    },
                    "fileOut": {
                      "description": "output file reference related to this config",
                      "type": "string"
                    }
                  },
                  "required": [
                    "fileIn",
                    "fileOut"
                  ]
                }
              ]
            }
          },
          "required": [
            "files"
          ]
        }
      },
      "minProperties": 1
    }
  },
  "required": [
    "version",
    "context"
  ]
}