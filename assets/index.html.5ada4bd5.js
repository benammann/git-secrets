import{_ as i,r as c,o,c as l,a as e,b as t,d as s,e as n}from"./app.08d44b1f.js";var r="/git-secrets/assets/git-secrets-demo.e4fe355a.gif",d="/git-secrets/assets/git-secrets-scan-demo.e9d802ff.png";const p={},u=s('<h2 id="encryption-and-rendering-engine-for-git-repositories" tabindex="-1"><a class="header-anchor" href="#encryption-and-rendering-engine-for-git-repositories" aria-hidden="true">#</a> encryption and rendering engine for git repositories</h2><p><img src="https://img.shields.io/github/v/release/benammann/git-secrets?label=release" alt="Tag"><img src="https://img.shields.io/docker/v/benammann/git-secrets?label=image" alt="Docker Image Version"><img src="https://github.com/benammann/git-secrets/actions/workflows/goreleaser.yml/badge.svg" alt="Release Badge"><img src="https://github.com/benammann/git-secrets/actions/workflows/docker-release.yml/badge.svg" alt="Test Badge"><img src="https://img.shields.io/github/license/benammann/git-secrets?123" alt="License"></p><p>Git Secrets encrypts your passwords and configurations for multiple environments and allows you to check them into a git repository. Using the GoLang templating engine, you can then decrypt them and write them to env files or Kubernetes deployment files.</p><h3 id="how-does-it-work" tabindex="-1"><a class="header-anchor" href="#how-does-it-work" aria-hidden="true">#</a> How does it work</h3><ul><li>For each Project / Context you can use a <strong>Encoder Secret</strong> which is stored at <code>~/.git-secrets.yaml</code></li><li>The <strong>Encoder Secret</strong> is used to encode your passwords which are then stored inside your git repositories <code>.git-secrets.json</code></li><li>The encrypted secrets are then decoded and rendered using Go Web Templates like Helm for example. (https://gowebexamples.com/templates/)</li><li>Each project can have multiple contexts for example <code>default</code> and <code>prod</code></li><li>Every custom context inherits from the <code>default</code> context, so you don&#39;t have to define values twice</li><li>You can use a different <strong>Encoder Secret</strong> in each context so the engineer can only access the secrets he should need</li></ul><h3 id="demo" tabindex="-1"><a class="header-anchor" href="#demo" aria-hidden="true">#</a> Demo</h3><p><img src="'+r+'" alt=""></p><h3 id="examples" tabindex="-1"><a class="header-anchor" href="#examples" aria-hidden="true">#</a> Examples</h3><ul><li>Encoding / Decoding: <a href="examples/with-binary-example">with-binary-example</a></li><li>Kubernetes Secrets: <a href="examples/render-kubernetes-secret">render-kubernetes-secret</a></li><li>Github Actions <a href=".github/workflows/docker-release.yml">.github/workflows/docker-release.yml</a></li></ul><h3 id="installation" tabindex="-1"><a class="header-anchor" href="#installation" aria-hidden="true">#</a> Installation</h3><p><code>Git-Secrets</code> is available on Linux, macOS and Windows platforms.</p>',11),m=n("Binaries for Linux, Windows and Mac are available as tarballs in the "),v={href:"https://github.com/benammann/git-secrets/releases",target:"_blank",rel:"noopener noreferrer"},h=n("release"),g=n(" page."),b=s(`<li><p>Via Curl for Linux and Mac (uses https://github.com/jpillora/installer)</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># without sudo</span>
<span class="token function">curl</span> https://i.jpillora.com/benammann/git-secrets<span class="token operator">!</span> <span class="token operator">|</span> <span class="token function">bash</span>

<span class="token comment"># using sudo (if mv fails)</span>
<span class="token function">curl</span> https://i.jpillora.com/benammann/git-secrets<span class="token operator">!</span><span class="token operator">!</span> <span class="token operator">|</span> <span class="token function">bash</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>Via Homebrew for macOS or LinuxBrew for Linux</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>brew <span class="token function">install</span> benammann/tap/git-secrets 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>Via a GO install</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># NOTE: The dev version will be in effect!</span>
go <span class="token function">install</span> github.com/benammann/git-secrets@latest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li>`,3),k=s(`<h2 id="getting-started" tabindex="-1"><a class="header-anchor" href="#getting-started" aria-hidden="true">#</a> Getting started</h2><h3 id="initialize-the-project" tabindex="-1"><a class="header-anchor" href="#initialize-the-project" aria-hidden="true">#</a> Initialize the project</h3><p>The configuration is made in a json file called <code>.git-secrets.json</code> you can also specify a custom path using <code>-f &lt;path-to-custom-file&gt;</code></p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># Create a new global encoder secret (which you can later share with your team)</span>
<span class="token function">git</span> secrets <span class="token builtin class-name">set</span> global-secret mySecret --value <span class="token variable"><span class="token variable">$(</span>pwgen -c <span class="token number">32</span> -n -s -y<span class="token variable">)</span></span>

<span class="token comment"># Create a new .git-secrets.json</span>
<span class="token function">git</span> secrets init

<span class="token comment"># Get the initial information of the config file</span>
<span class="token function">git</span> secrets info

<span class="token comment"># Get the CLI&#39;s current version</span>
<span class="token function">git</span> secrets version
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="encode-a-secret-and-add-a-config-entry" tabindex="-1"><a class="header-anchor" href="#encode-a-secret-and-add-a-config-entry" aria-hidden="true">#</a> Encode a secret and add a config entry</h3><p>Git-Secrets allows you to store encrypted <code>Secrets</code> and plain <code>Configs</code> both are stored in <code>.git-secrets.json</code></p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># Encode a value (uses interactive input)</span>
<span class="token function">git</span> secrets <span class="token builtin class-name">set</span> secret databasePassword

<span class="token comment"># Write the value to a custom context</span>
<span class="token comment"># Add Context: git secrets add context dev</span>
<span class="token function">git</span> secrets <span class="token builtin class-name">set</span> secret databasePassword -c dev

<span class="token comment"># Add a new config value</span>
<span class="token function">git</span> secrets <span class="token builtin class-name">set</span> config databaseHost db-host.svc.local

<span class="token comment"># Write the config value to a custom context</span>
<span class="token comment"># Add Context: git secrets add context dev</span>
<span class="token function">git</span> secrets <span class="token builtin class-name">set</span> config databaseHost db-host.my-dev-db.svc -c dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="decode-the-secrets-and-get-the-config-entry" tabindex="-1"><a class="header-anchor" href="#decode-the-secrets-and-get-the-config-entry" aria-hidden="true">#</a> Decode the secrets and get the config entry</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># Get the decoded value</span>
<span class="token function">git</span> secrets get secret databasePassword

<span class="token comment"># Get the value stored in databaseHost</span>
<span class="token function">git</span> secrets get config databaseHost
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="create-a-env-dist-file" tabindex="-1"><a class="header-anchor" href="#create-a-env-dist-file" aria-hidden="true">#</a> Create a <code>.env.dist</code> file</h3><p>Git-Secrets allows you to render files using the <code>Secret</code> and <code>Config</code> values on the fly using gotemplates, just like Helm. For a syntax reference head over to https://gowebexamples.com/templates/</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>DATABASE_HOST={{.Configs.databaseHost}}
DATABASE_PASSWORD={{.Secrets.databasePassword}}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>You can have custom renderTargets to render files. For example <code>env</code> or <code>k8s</code>. You can than add multiple files to a renderTargets.</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># always render empty.dist to .env</span>
<span class="token comment"># uses the targetName: env</span>
<span class="token function">git</span> secrets <span class="token function">add</span> <span class="token function">file</span> empty.dist .env -t <span class="token function">env</span>

<span class="token comment"># now execute the rendering process</span>
<span class="token comment"># this renders the empty.dist file to .env and fills out all variables using the default context</span>
<span class="token comment"># targetName: env</span>
<span class="token function">git</span> secrets render <span class="token function">env</span>

<span class="token comment"># prints all available variables</span>
<span class="token function">git</span> secrets render <span class="token function">env</span> --debug

<span class="token comment"># prints the rendered files to the console without actually writing the file</span>
<span class="token function">git</span> secrets render <span class="token function">env</span> --dry-run

<span class="token comment"># renders the files using the prod context</span>
<span class="token function">git</span> secrets render <span class="token function">env</span> -c prod
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="scan-for-plain-secrets" tabindex="-1"><a class="header-anchor" href="#scan-for-plain-secrets" aria-hidden="true">#</a> Scan for plain secrets</h3><p><code>Git-Secrets</code> provides a simple command to scan for plain secrets in the project files.</p><p><img src="`+d+`" alt=""></p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># scan all files added to git</span>
<span class="token function">git</span> secrets scan -a

<span class="token comment"># scan staged files only</span>
<span class="token function">git</span> secrets scan

<span class="token comment"># hint: add -v to show all the scanned file names</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You should use this command to setup a pre-commit git-hook in your project. You can use Husky (https://typicode.github.io/husky/#/) to automatically install and setup the hook.</p><h3 id="custom-template-functions" tabindex="-1"><a class="header-anchor" href="#custom-template-functions" aria-hidden="true">#</a> Custom Template Functions</h3><p>Git Secrets extends the GoLang Templating engine by some useful functions</p><h4 id="base64encode" tabindex="-1"><a class="header-anchor" href="#base64encode" aria-hidden="true">#</a> Base64Encode</h4><p>The Base64Encode function takes the first argument and encodes it as Base64. This allows you to render Kubernetes Secrets</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token comment"># Created by git-secrets</span>
<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1
<span class="token key atrule">data</span><span class="token punctuation">:</span>
  <span class="token key atrule">apiPassword</span><span class="token punctuation">:</span> <span class="token string">&quot;{{ Base64Encode .Secrets.applicationAPassword }}&quot;</span>
<span class="token key atrule">kind</span><span class="token punctuation">:</span> Secret
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> api<span class="token punctuation">-</span>application<span class="token punctuation">-</span>a
  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>.Configs.namespace<span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token key atrule">type</span><span class="token punctuation">:</span> Opaque
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="gitconfig" tabindex="-1"><a class="header-anchor" href="#gitconfig" aria-hidden="true">#</a> GitConfig</h4><p>GitConfig allows you to resolve git config values. For example if you want to render files individually to the developer</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>GIT_NAME={{GitConfig &quot;user.name&quot;}}
GIT_EMAIL={{GitConfig &quot;user.email&quot;}}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="using-docker" tabindex="-1"><a class="header-anchor" href="#using-docker" aria-hidden="true">#</a> Using Docker</h3><p>There is also a Docker Image available: <code>benammann/git-secrets</code>.</p><p>Since git-secrets normally depends on a global <code>.git-secrets.yaml</code> you need to use the <code>--secret</code> parameter to pass the encryption secret using cli. You also need to mount the project&#39;s <code>.git-secrets.json</code> file using docker volume mounts.</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># just execute the help command</span>
<span class="token function">docker</span> run benamnann/git-secrets <span class="token builtin class-name">help</span>

<span class="token comment"># get all the information about the .git-secrets.json file</span>
<span class="token function">docker</span> run <span class="token punctuation">\\</span>
  <span class="token comment"># mount .git-secrets.json to /git-secrets/.git-secrets.json</span>
  -v <span class="token environment constant">$PWD</span>/.git-secrets.json:/git-secrets/.git-secrets.json <span class="token punctuation">\\</span>
  <span class="token comment"># use the official docker image</span>
  benammann/git-secrets <span class="token punctuation">\\</span>
  <span class="token comment"># execute the info command</span>
  info
  
<span class="token function">docker</span> run <span class="token punctuation">\\</span>
  <span class="token comment"># mount .git-secrets.json to /git-secrets/.git-secrets.json</span>
  -v <span class="token environment constant">$PWD</span>/.git-secrets.json:/git-secrets/.git-secrets.json <span class="token punctuation">\\</span>
  <span class="token comment"># use the official docker image</span>
  benammann/git-secrets <span class="token punctuation">\\</span>
  <span class="token comment"># pass the encryption secret &#39;gitsecretspublic&#39; including it&#39;s value from an local Environment variable to docker</span>
  --secret <span class="token assign-left variable">gitsecretspublic</span><span class="token operator">=</span><span class="token variable">\${SECRET_VALUE}</span> <span class="token punctuation">\\</span>
  <span class="token comment"># decrypt the secret crToken</span>
  get secret crToken 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="documentation" tabindex="-1"><a class="header-anchor" href="#documentation" aria-hidden="true">#</a> Documentation</h2><h3 id="how-the-encryption-is-done" tabindex="-1"><a class="header-anchor" href="#how-the-encryption-is-done" aria-hidden="true">#</a> How the encryption is done</h3>`,33),f=n("Git-Secrets uses AES-256 to encrypt / decrypt the secrets. Read more about it here "),y={href:"https://de.wikipedia.org/wiki/Advanced_Encryption_Standard",target:"_blank",rel:"noopener noreferrer"},x=n("Advanced Encryption Standard"),w=n("."),_=s(`<p>The encryption key is stored outside your git repository and can be referenced using multiple methods</p><p>The implementation can be found here <a href="pkg/encryption/engine_aes.go">engine_aes.go</a>.</p><h4 id="named-secrets" tabindex="-1"><a class="header-anchor" href="#named-secrets" aria-hidden="true">#</a> Named Secrets</h4><p>Named secrets are stored in <code>~/.git-secrets.yaml</code> and have a name. You can than reference it using the <code>context.decryptSecret.fromName</code> key.</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>&quot;decryptSecret&quot;: {
    &quot;fromName&quot;: &quot;withbinaryexample&quot;
},
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can define a <code>decryptSecret</code> in each context to for example encrypt the production secrets using a different encryption key. This can be useful to not let your developers know the CI/CD Secrets.</p><p>The CLI provides multiple ways how to configure and manage your global secrets.</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># Generate via pwgen and read from stdin</span>
<span class="token function">git</span> secrets <span class="token builtin class-name">set</span> global-secret mySecret --value <span class="token variable"><span class="token variable">$(</span>pwgen -c <span class="token number">32</span> -n -s -y<span class="token variable">)</span></span>

<span class="token comment"># Set manually using interactive input</span>
<span class="token function">git</span> secrets <span class="token builtin class-name">set</span> global-secret mySecret

<span class="token comment"># Get the written secret</span>
<span class="token function">git</span> secrets get global-secret mySecret

<span class="token comment"># Get all global secret names</span>
<span class="token function">git</span> secrets get global-secrets
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="overwrite-using-cli-args" tabindex="-1"><a class="header-anchor" href="#overwrite-using-cli-args" aria-hidden="true">#</a> Overwrite using CLI Args</h4><p>In case you don&#39;t want to store the secrets globally and on the disk you can also use the following cli args to inject the secrets at runtime</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># Uses the secret passed via --secret (insecure)</span>
<span class="token function">git</span> secrets get secret mySecret --secret <span class="token assign-left variable">secretName</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>SECRET_VALUE<span class="token variable">)</span></span> --secret <span class="token assign-left variable">secretName1</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>SECRET_VALUE_1<span class="token variable">)</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,11);function S(E,T){const a=c("ExternalLinkIcon");return o(),l("div",null,[u,e("ul",null,[e("li",null,[e("p",null,[m,e("a",v,[h,t(a)]),g])]),b]),k,e("p",null,[f,e("a",y,[x,t(a)]),w]),_])}var C=i(p,[["render",S],["__file","index.html.vue"]]);export{C as default};
